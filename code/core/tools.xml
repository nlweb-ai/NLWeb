<?xml version="1.0" encoding="UTF-8"?>
<Tools>

<!-- This file contains all the tools that can be used to process queries for different schema.org types. -->

  <Thing>
    <Tool name="search" enabled="true">
      <path>/api/search</path>
      <method>url</method>
      <argument name="query">User's search query</argument>
      <example>Find Italian restaurants near me</example>
      <example>Show me action movies from the 1990s</example>
      <example>I need vegetarian pasta recipes</example>
      <example>Find wireless headphones under $200</example>
      <prompt>
        The user has the following query: {request.query}.

        The search tool finds items that match specific search criteria. It's designed for:
        - Finding recipes/movies/books/products that match certain requirements
        - Discovering items based on attributes like genre, cuisine type, price range, or features
        - Broad exploration when users want to see what's available
        
        The search tool is NOT the best choice if the user is asking for specific details 
        about a PARTICULAR named item (like ingredients, instructions, cast, price, etc.).
        
        Assign a score from 0 to 100 for whether the search tool is appropriate.
        Also provide the search query that should be passed to the tool.
      </prompt>
      <returnStruc>
        {
          "score": "integer between 0 and 100",
          "search_query": "the search query that should be passed to the tool"
        }
      </returnStruc>
    </Tool>

    <Tool name="details" enabled="true">
      <path>/api/details</path>
      <method>url</method>
      <argument name="item">Name or identifier of the item</argument>
      <example>What are the ingredients in Chicken Alfredo?</example>
      <example>Who directed The Dark Knight?</example>
      <example>What's the price of the iPhone 15 Pro?</example>
      <example>What are the hours for Olive Garden?</example>
      <prompt>
        The user has the following query: {request.query}.
        
        The details tool gets specific information about a PARTICULAR named item and is best for:
        - Getting ingredients, instructions, or other details about a SPECIFIC recipe/item
        - Getting the price, specifications, color, etc. for a specific product
        - Queries that mention a specific item name and ask for details about it
        
        The details tool should score HIGH (80-100) if the user names a specific item and wants details.
        The details tool should score LOW (0-30) if the user wants to find/search for items.
        
        Assign a score from 0 to 100 for whether the details tool is appropriate.
        If the user is asking for details about a specific item, provide the item name and what details are being requested.
      </prompt>
      <returnStruc>
        {
          "score": "integer between 0 and 100",
          "item_name": "the name or identifier of the specific item for which details are being sought",
          "details_requested": "the details that the user is asking for"
        }
      </returnStruc>
    </Tool>

    <Tool name="compare" enabled="true">
      <path>/api/compare</path>
      <method>url</method>
      <argument name="item1">First item name or identifier</argument>
      <argument name="item2">Second item name or identifier</argument>
      <example>Compare pizza margherita vs pepperoni pizza</example>
      <example>Which is better: iPhone vs Samsung Galaxy?</example>
      <example>Compare The Dark Knight vs The Dark Knight Rises</example>
      <example>Which has better ratings: Olive Garden vs Carrabba's?</example>
      <prompt>
        The user has the following query: {request.query}.
        
        The compare tool compares two items side by side and is best for:
        - Direct comparisons between two specific named items
        - Questions asking "which is better" or "what's the difference"
        - Evaluating items against each other on specific criteria
        
        Assign a score from 0 to 100 for whether the compare tool is appropriate.

        If the score is above 74, provide the names of the two items being compared in the item1_name and item2_name fields.
        If there is a specific criteria for the comparison, provide it in the details_requested field.
      </prompt>
      <returnStruc>
        {
          "score": "integer between 0 and 100",

          "item1_name": "the name or identifier of the first item to compare",
          "item2_name": "the name or identifier of the second item to compare",
          "details_requested": "the details that the user is asking for"
        }
      </returnStruc>
    </Tool>
  </Thing>

  <Recipe>
    <Tool name="search" enabled="true">
      <path>/api/recipes/search</path>
      <method>url</method>
      <argument name="query">User's search query for recipes</argument>
      <example>Find quick vegetarian pasta recipes under 30 minutes</example>
      <example>Show me gluten-free dessert recipes</example>
      <example>I need chicken recipes that take less than 45 minutes</example>
      <example>Find keto-friendly dinner recipes with salmon</example>
      <prompt>
        The user has the following query: {request.query}.

        The recipe search tool finds recipes that match specific criteria such as cuisine type, dietary restrictions, cooking time, or ingredients. It's designed for:
        - Finding recipes based on dietary needs (vegetarian, gluten-free, keto, etc.)
        - Discovering recipes by cuisine type, cooking time, or difficulty
        - Broad recipe exploration when users want to see what's available
        
        The search tool is NOT the best choice if the user is asking for specific details 
        about a PARTICULAR named recipe (like ingredients, instructions, nutrition info, etc.).
        
        Assign a score from 0 to 100 for whether the recipe search tool is appropriate.
        Also provide the search query that should be passed to the tool.
      </prompt>
      <returnStruc>
        {
          "score": "integer between 0 and 100",
          "search_query": "the search query that should be passed to the tool"
        }
      </returnStruc>
    </Tool>

    <Tool name="details" enabled="true">
      <path>/api/recipes/details</path>
      <method>url</method>
      <argument name="item">Name or identifier of the recipe</argument>
      <example>What are the nutritional facts for Chicken Alfredo?</example>
      <example>Show me the ingredients for Beef Stroganoff</example>
      <example>How long does it take to make Homemade Lasagna?</example>
      <example>What's the calorie content of Thai Green Curry?</example>
      <prompt>
        The user has the following query: {request.query}.
        
        The recipe details tool gets detailed information about a specific recipe including nutritional content, ingredients list, cooking instructions, prep time, and serving size. It's best for:
        - Getting ingredients for a SPECIFIC named recipe
        - Getting cooking instructions for a particular recipe
        - Getting nutritional information for a specific dish
        - Queries that mention a specific recipe name and ask for details about it
        
        The details tool should score HIGH (80-100) if the user names a specific recipe and wants details.
        The details tool should score LOW (0-30) if the user wants to find/search for recipes.
        
        Assign a score from 0 to 100 for whether the recipe details tool is appropriate.
        If the user is asking for details about a specific recipe, provide the recipe name and what details are being requested.
      </prompt>
      <returnStruc>
        {
          "score": "integer between 0 and 100",
          "item_name": "the name or identifier of the specific recipe for which details are being sought",
          "details_requested": "the details that the user is asking for"
        }
      </returnStruc>
    </Tool>

    <Tool name="compare" enabled="true">
      <path>/api/recipes/compare</path>
      <method>url</method>
      <argument name="item1">First recipe name or identifier</argument>
      <argument name="item2">Second recipe name or identifier</argument>
      <example>Compare the calories in pizza margherita vs pepperoni pizza</example>
      <example>Which has more protein: grilled chicken or salmon teriyaki?</example>
      <example>Compare cooking time between homemade bread and no-knead bread</example>
      <example>Which is healthier: caesar salad or greek salad?</example>
      <prompt>
        The user has the following query: {request.query}.
        
        The recipe compare tool compares two recipes side by side for nutritional content, ingredients, cooking time, difficulty, or cost. It's best for:
        - Direct comparisons between two specific named recipes
        - Questions asking "which is healthier" or "which has more protein"
        - Evaluating recipes against each other on specific criteria
        
        Assign a score from 0 to 100 for whether the recipe compare tool is appropriate.
        If appropriate, identify the two recipes being compared.
      </prompt>
      <returnStruc>
        {
          "score": "integer between 0 and 100",
          "item1": "the name or identifier of the first recipe to compare",
          "item2": "the name or identifier of the second recipe to compare"
        }
      </returnStruc>
    </Tool>

    <Tool name="recipe_substitutions" enabled="false">
      <path>/api/recipes/substitutions</path>
      <method>url</method>
      <argument name="recipe_name">Name of the recipe to modify</argument>
      <argument name="dietary_need">Specific dietary requirement (dairy-free, nut-free, low-sodium, etc.)</argument>
      <argument name="unavailable_ingredient">Ingredient that needs to be substituted</argument>
      <argument name="preference">Taste or texture preference for substitution</argument>
      <example>How can I make chocolate cake dairy-free?</example>
      <example>What can I substitute for eggs in cookie dough?</example>
      <example>Make this pasta recipe gluten-free</example>
      <example>I don't have buttermilk, what can I use instead?</example>
      <prompt>
        The user has the following query: {request.query}.
        
        The recipe substitutions tool suggests ingredient substitutions for recipes to accommodate dietary restrictions, allergies, or ingredient availability. It's best for:
        - Making recipes dairy-free, gluten-free, vegan, etc.
        - Finding alternatives when ingredients are unavailable
        - Adapting recipes for allergies or dietary restrictions
        - Questions about ingredient replacements
        
        Assign a score from 0 to 100 for whether the recipe substitutions tool is appropriate.
        If appropriate, identify the recipe, dietary need, or ingredient substitution being requested.
        Only fill out the fields that are explicitly mentioned in the user's query.
        
        IMPORTANT: If the user mentions a specific food item or recipe (e.g., "chocolate chip cookies", "chocolate cake", "pasta"), 
        include it in the recipe_name field even if they don't explicitly say "recipe".
      </prompt>
      <returnStruc>
        {
          "score": "integer between 0 and 100",
          "recipe_name": "name of the recipe to modify",
          "dietary_need": "specific dietary requirement",
          "unavailable_ingredient": "ingredient that needs to be substituted",
          "preference": "preference for substitution"
        }
      </returnStruc>
    </Tool>

    <Tool name="accompaniment" enabled="true">
      <path>/api/accompaniment</path>
      <method>url</method>
      <argument name="search_query">Type of accompaniment to search for</argument>
      <argument name="main_item">Main item to find accompaniments for</argument>
      <example>what salad would go best with an eggplant lasagna</example>
      <example>give me a sauce that would balance out a bitter melon dish</example>
      <example>wines that would pair with a pear dessert</example>
      <example>what side dishes go well with roast turkey</example>
      <prompt>
        The user has the following query: {request.query}.
        
        The accompaniment tool finds items that complement or pair well with a main item. It is best for:
        - Finding wines that pair with specific dishes
        - Suggesting side dishes or salads for main courses
        - Recommending sauces or condiments that balance flavors
        - Finding complementary items where one enhances the other
        
        This tool should score HIGH (80-100) when the user:
        - Asks what goes well with a specific dish
        - Wants pairing recommendations (wine, sides, sauces)
        - Needs something to complement or balance another item
        
        This tool should score LOW (0-30) when the user:
        - Just wants a recipe for something
        - Is looking for ingredient substitutions
        - Wants nutritional information
        
        Assign a score from 0 to 100 for whether this tool is appropriate.
        If the score is above 74, provide:
        - search_query: the type of accompaniment (e.g., "salad", "sauce", "wine")
        - main_item: what it should pair with (e.g., "eggplant lasagna", "bitter melon")
      </prompt>
      <returnStruc>
        {
          "score": "integer between 0 and 100",
          "search_query": "the decontextualized search term for the accompaniment type only",
          "main_item": "the main item to find accompaniments for"
        }
      </returnStruc>
    </Tool>
  </Recipe>

  <Movie>
    <Tool name="search" enabled="true">
      <path>/api/movies/search</path>
      <method>url</method>
      <argument name="query">User's search query for movies</argument>
      <example>Find action movies from the 1990s</example>
      <example>Show me highly rated comedies from 2020-2023</example>
      <example>I want to watch sci-fi movies with good ratings</example>
      <example>Find family-friendly movies for kids</example>
      <prompt>
        The user has the following query: {request.query}.

        The movie search tool finds movies based on criteria like genre, year, rating, director, or actor. It's designed for:
        - Finding movies by genre, year, or rating criteria
        - Discovering movies featuring specific actors or directors
        - Broad movie exploration when users want to see what's available
        
        The search tool is NOT the best choice if the user is asking for specific details 
        about a PARTICULAR named movie (like cast, plot, runtime, ratings, etc.).
        
        Assign a score from 0 to 100 for whether the movie search tool is appropriate.
        Also provide the search query that should be passed to the tool.
      </prompt>
      <returnStruc>
        {
          "score": "integer between 0 and 100",
          "search_query": "the search query that should be passed to the tool"
        }
      </returnStruc>
    </Tool>

    <Tool name="details" enabled="true">
      <path>/api/movies/details</path>
      <method>url</method>
      <argument name="item">Title or identifier of the movie</argument>
      <example>Who directed The Dark Knight?</example>
      <example>What's the plot of Inception?</example>
      <example>How long is Avengers Endgame?</example>
      <example>What's the rating for Parasite?</example>
      <prompt>
        The user has the following query: {request.query}.
        
        The movie details tool gets detailed information about a specific movie including cast, director, plot, runtime, release date, and ratings. It's best for:
        - Getting cast information for a SPECIFIC named movie
        - Getting plot, director, or other details for a particular movie
        - Getting ratings or runtime for a specific film
        - Queries that mention a specific movie title and ask for details about it
        
        The details tool should score HIGH (80-100) if the user names a specific movie and wants details.
        The details tool should score LOW (0-30) if the user wants to find/search for movies.
        
        Assign a score from 0 to 100 for whether the movie details tool is appropriate.
        If the user is asking for details about a specific movie, provide the movie title and what details are being requested.
      </prompt>
      <returnStruc>
        {
          "score": "integer between 0 and 100",
          "item_name": "the title or identifier of the specific movie for which details are being sought",
          "details_requested": "the details that the user is asking for"
        }
      </returnStruc>
    </Tool>

    <Tool name="compare" enabled="true">
      <path>/api/movies/compare</path>
      <method>url</method>
      <argument name="item1">First movie title or identifier</argument>
      <argument name="item2">Second movie title or identifier</argument>
      <example>Compare The Dark Knight vs The Dark Knight Rises</example>
      <example>Which made more money: Avengers or Avatar?</example>
      <example>Compare the ratings of Inception vs Interstellar</example>
      <example>Which has a better cast: Ocean's Eleven or Ocean's Twelve?</example>
      <prompt>
        The user has the following query: {request.query}.
        
        The movie compare tool compares two movies side by side for ratings, box office, cast, or other attributes. It's best for:
        - Direct comparisons between two specific named movies
        - Questions asking "which made more money" or "which has better ratings"
        - Evaluating movies against each other on specific criteria
        
        Assign a score from 0 to 100 for whether the movie compare tool is appropriate.
        If appropriate, identify the two movies being compared.
      </prompt>
      <returnStruc>
        {
          "score": "integer between 0 and 100",
          "item1": "the title or identifier of the first movie to compare",
          "item2": "the title or identifier of the second movie to compare"
        }
      </returnStruc>
    </Tool>

    <Tool name="filmography_search" enabled="true">
      <path>/api/movies/filmography</path>
      <method>url</method>
      <argument name="person_name">Name of the actor or director</argument>
      <argument name="role">Role type (actor, director, producer, writer)</argument>
      <argument name="year_range">Filter by release year range</argument>
      <argument name="genre">Filter by genre</argument>
      <example>What movies has Leonardo DiCaprio been in?</example>
      <example>Show me all Christopher Nolan films</example>
      <example>Find all Tom Hanks movies from the 1990s</example>
      <example>What horror movies has Jordan Peele directed?</example>
      <prompt>
        The user has the following query: {request.query}.
        
        The filmography search tool finds all movies featuring a specific actor or directed by a specific director. It's best for:
        - Finding all movies by a specific actor or director
        - Exploring someone's complete filmography
        - Filtering movies by person and additional criteria like year or genre
        
        Assign a score from 0 to 100 for whether the filmography search tool is appropriate.
        If appropriate, identify the person and their role (actor, director, etc.).
      </prompt>
      <returnStruc>
        {
          "score": "integer between 0 and 100",
          "person_name": "name of the actor or director",
          "role": "role type (actor, director, producer, writer)",
          "year_range": "filter by release year range",
          "genre": "filter by genre"
        }
      </returnStruc>
    </Tool>
  </Movie>

  <Product>
    <Tool name="search" enabled="true">
      <path>/api/products/search</path>
      <method>url</method>
      <argument name="query">User's search query for products</argument>
      <example>Find laptops under $1000 with good ratings</example>
      <example>Show me Nike running shoes in size 10</example>
      <example>I need a wireless Bluetooth speaker under $200</example>
      <example>Find organic skincare products with 4+ star reviews</example>
      <prompt>
        The user has the following query: {request.query}.

        The product search tool finds products that match specific criteria such as category, price range, brand, features, or customer ratings. It's designed for:
        - Finding products by category, price, brand, or features
        - Discovering products that meet specific requirements
        - Broad product exploration when users want to see what's available
        
        The search tool is NOT the best choice if the user is asking for specific details 
        about a PARTICULAR named product (like price, specs, colors, reviews, etc.).
        
        Assign a score from 0 to 100 for whether the product search tool is appropriate.
        Also provide the search query that should be passed to the tool.
      </prompt>
      <returnStruc>
        {
          "score": "integer between 0 and 100",
          "search_query": "the search query that should be passed to the tool"
        }
      </returnStruc>
    </Tool>

    <Tool name="details" enabled="true">
      <path>/api/products/details</path>
      <method>url</method>
      <argument name="item">Name or identifier of the product</argument>
      <example>What colors does the iPhone 15 Pro come in?</example>
      <example>What's the price of the Samsung 65-inch QLED TV?</example>
      <example>Show me customer reviews for the Keurig K-Elite</example>
      <example>Is the Levi's 501 Jeans available in size 32?</example>
      <prompt>
        The user has the following query: {request.query}.
        
        The product details tool gets detailed information about a specific product including price, specifications, available colors/sizes, customer reviews, and shipping information. It's best for:
        - Getting price or specs for a SPECIFIC named product
        - Getting availability, colors, or sizes for a particular product
        - Getting customer reviews for a specific item
        - Queries that mention a specific product name and ask for details about it
        
        The details tool should score HIGH (80-100) if the user names a specific product and wants details.
        The details tool should score LOW (0-30) if the user wants to find/search for products.
        
        Assign a score from 0 to 100 for whether the product details tool is appropriate.
        If the user is asking for details about a specific product, provide the product name and what details are being requested.
      </prompt>
      <returnStruc>
        {
          "score": "integer between 0 and 100",
          "item_name": "the name or identifier of the specific product for which details are being sought",
          "details_requested": "the details that the user is asking for"
        }
      </returnStruc>
    </Tool>

    <Tool name="compare" enabled="true">
      <path>/api/products/compare</path>
      <method>url</method>
      <argument name="item1">First product name or identifier</argument>
      <argument name="item2">Second product name or identifier</argument>
      <example>Compare iPhone 15 vs Samsung Galaxy S24 prices and features</example>
      <example>Which is better: Sony WH-1000XM5 or Bose QuietComfort headphones?</example>
      <example>Compare these three laptops for gaming performance</example>
      <example>What's the price difference between these two coffee machines?</example>
      <prompt>
        The user has the following query: {request.query}.
        
        The product compare tool compares two or more products side by side for price, features, specifications, customer ratings, or other attributes. It's best for:
        - Direct comparisons between two specific named products
        - Questions asking "which is better" or "what's the price difference"
        - Evaluating products against each other on specific criteria
        
        Assign a score from 0 to 100 for whether the product compare tool is appropriate.
        If appropriate, identify the products being compared.
      </prompt>
      <returnStruc>
        {
          "score": "integer between 0 and 100",
          "item1": "the name or identifier of the first product to compare",
          "item2": "the name or identifier of the second product to compare"
        }
      </returnStruc>
    </Tool>
  </Product>

  <Restaurant>
    <Tool name="search" enabled="true">
      <path>/api/restaurants/search</path>
      <method>url</method>
      <argument name="query">User's search query for restaurants</argument>
      <example>Find Italian restaurants near downtown with outdoor seating</example>
      <example>Show me highly rated sushi places within 5 miles</example>
      <example>I need cheap eats near the airport</example>
      <example>Find upscale restaurants for a date night in the city center</example>
      <prompt>
        The user has the following query: {request.query}.

        The restaurant search tool finds restaurants in a specific area that match criteria such as cuisine type, price range, ratings, or special features. It's designed for:
        - Finding restaurants by cuisine, location, price, or features
        - Discovering restaurants that meet specific requirements
        - Broad restaurant exploration when users want to see what's available
        
        The search tool is NOT the best choice if the user is asking for specific details 
        about a PARTICULAR named restaurant (like menu, hours, ratings, location, etc.).
        
        Assign a score from 0 to 100 for whether the restaurant search tool is appropriate.
        Also provide the search query that should be passed to the tool.
      </prompt>
      <returnStruc>
        {
          "score": "integer between 0 and 100",
          "search_query": "the search query that should be passed to the tool"
        }
      </returnStruc>
    </Tool>

    <Tool name="details" enabled="true">
      <path>/api/restaurants/details</path>
      <method>url</method>
      <argument name="item">Name or identifier of the restaurant</argument>
      <example>What are the hours for Olive Garden?</example>
      <example>Show me the menu for Joe's Pizza</example>
      <example>What's the rating for The French Laundry?</example>
      <example>Does Chipotle have outdoor seating?</example>
      <prompt>
        The user has the following query: {request.query}.
        
        The restaurant details tool gets detailed information about a specific restaurant including menu, hours, location, ratings, and special features. It's best for:
        - Getting hours, menu, or location for a SPECIFIC named restaurant
        - Getting ratings or reviews for a particular restaurant
        - Getting specific features like outdoor seating for a named restaurant
        - Queries that mention a specific restaurant name and ask for details about it
        
        The details tool should score HIGH (80-100) if the user names a specific restaurant and wants details.
        The details tool should score LOW (0-30) if the user wants to find/search for restaurants.
        
        Assign a score from 0 to 100 for whether the restaurant details tool is appropriate.
        If the user is asking for details about a specific restaurant, provide the restaurant name and what details are being requested.
      </prompt>
      <returnStruc>
        {
          "score": "integer between 0 and 100",
          "item_name": "the name or identifier of the specific restaurant for which details are being sought",
          "details_requested": "the details that the user is asking for"
        }
      </returnStruc>
    </Tool>

    <Tool name="compare" enabled="true">
      <path>/api/restaurants/compare</path>
      <method>url</method>
      <argument name="item1">First restaurant name or identifier</argument>
      <argument name="item2">Second restaurant name or identifier</argument>
      <example>Compare Olive Garden vs Carrabba's Italian Grill</example>
      <example>Which is more expensive: Ruth's Chris or Morton's?</example>
      <example>Compare the ratings of In-N-Out vs Five Guys</example>
      <example>Which has better vegetarian options: Chipotle or Qdoba?</example>
      <prompt>
        The user has the following query: {request.query}.
        
        The restaurant compare tool compares two restaurants side by side for ratings, price, cuisine, or other attributes. It's best for:
        - Direct comparisons between two specific named restaurants
        - Questions asking "which is better" or "which is more expensive"
        - Evaluating restaurants against each other on specific criteria
        
        Assign a score from 0 to 100 for whether the restaurant compare tool is appropriate.
        If appropriate, identify the two restaurants being compared.
      </prompt>
      <returnStruc>
        {
          "score": "integer between 0 and 100",
          "item1": "the name or identifier of the first restaurant to compare",
          "item2": "the name or identifier of the second restaurant to compare"
        }
      </returnStruc>
    </Tool>

    <Tool name="restaurant_menu" enabled="true">
      <path>/api/restaurants/menu</path>
      <method>url</method>
      <argument name="restaurant_name">Name of the restaurant</argument>
      <argument name="restaurant_id">Unique identifier of the restaurant</argument>
      <argument name="dietary_constraint">Dietary restrictions (vegetarian, vegan, gluten-free, keto, etc.)</argument>
      <argument name="meal_type">Type of meal (breakfast, lunch, dinner, appetizers, desserts)</argument>
      <argument name="allergens">Food allergies to avoid</argument>
      <example>What vegetarian options does Olive Garden have?</example>
      <example>Show me gluten-free dishes at this Italian restaurant</example>
      <example>What can I order at McDonald's if I'm on keto?</example>
      <example>Does this restaurant have nut-free desserts?</example>
      <prompt>
        The user has the following query: {request.query}.
        
        The restaurant menu tool gets menu information for a specific restaurant and suggests dishes based on dietary constraints or preferences. It's best for:
        - Getting menu options for specific dietary needs at a named restaurant
        - Finding dishes that meet dietary restrictions at a particular restaurant
        - Getting recommendations based on preferences at a specific restaurant
        
        Assign a score from 0 to 100 for whether the restaurant menu tool is appropriate.
        If appropriate, identify the restaurant and any dietary constraints or preferences.
      </prompt>
      <returnStruc>
        {
          "score": "integer between 0 and 100",
          "restaurant_name": "name of the restaurant",
          "restaurant_id": "unique identifier of the restaurant",
          "dietary_constraint": "dietary restrictions",
          "meal_type": "type of meal",
          "allergens": "food allergies to avoid"
        }
      </returnStruc>
    </Tool>

    <Tool name="restaurant_nearby" enabled="true">
      <path>/api/restaurants/nearby</path>
      <method>url</method>
      <argument name="reference_location">Specific place, landmark, or address</argument>
      <argument name="radius">Search radius in miles or kilometers</argument>
      <argument name="cuisine">Preferred cuisine type</argument>
      <argument name="open_now">Filter for currently open restaurants</argument>
      <argument name="price_preference">Preferred price range</argument>
      <example>Find restaurants near the Eiffel Tower</example>
      <example>What's good to eat near Times Square?</example>
      <example>Show me restaurants within walking distance of the hotel</example>
      <example>Find coffee shops near the university campus</example>
      <prompt>
        The user has the following query: {request.query}.
        
        The restaurant nearby tool finds restaurants close to a specific location, landmark, or address. It's best for:
        - Finding restaurants near a specific location or landmark
        - Getting dining options within a certain distance of a place
        - Location-based restaurant discovery
        
        Assign a score from 0 to 100 for whether the restaurant nearby tool is appropriate.
        If appropriate, identify the location and any preferences like cuisine or price range.
      </prompt>
      <returnStruc>
        {
          "score": "integer between 0 and 100",
          "reference_location": "specific place, landmark, or address",
          "radius": "search radius in miles or kilometers",
          "cuisine": "preferred cuisine type",
          "open_now": "filter for currently open restaurants",
          "price_preference": "preferred price range"
        }
      </returnStruc>
    </Tool>
  </Restaurant>

</Tools>
